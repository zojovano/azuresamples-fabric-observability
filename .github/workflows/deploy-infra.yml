name: Deploy Azure Infrastructure

on:
  push:
    branches:
      - main
    paths:
      - 'infra/Bicep/**'
      - 'infra/kql-definitions/**'
      - '.github/workflows/deploy-infra.yml'
  workflow_dispatch:
    inputs:
      location:
        description: 'Azure region for deployment'
        required: false
        default: 'swedencentral'
        type: string

env:
  LOCATION: ${{ github.event.inputs.location || 'swedencentral' }}
  RESOURCE_GROUP_NAME: 'azuresamples-platformobservabilty-fabric'

permissions:
  id-token: write
  contents: read

jobs:
  validate:
    name: Validate Bicep Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure CLI login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Validate Bicep files
        run: |
          cd infra/Bicep
          az bicep build --file main.bicep
          echo "Bicep files validated successfully"

  deploy-infra:
    name: Deploy Azure Resources
    needs: validate
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy Bicep
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          template: ./infra/Bicep/main.bicep
          parameters: >
            location=${{ env.LOCATION }}
            adminObjectId=${{ secrets.ADMIN_OBJECT_ID }}
          deploymentName: 'github-${{ github.run_number }}'
          scope: subscription
          region: ${{ env.LOCATION }}
          failOnStdErr: false

  deploy-kql-tables:
    name: Deploy KQL Tables
    needs: deploy-infra
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create KQL Tables
        run: |
          # Get Fabric workspace information
          echo "Getting Fabric workspace details..."
          
          # Check if resource group exists first
          if ! az group show --name ${{ env.RESOURCE_GROUP_NAME }} > /dev/null 2>&1; then
            echo "Resource group ${{ env.RESOURCE_GROUP_NAME }} not found. Skipping KQL table creation."
            exit 0
          fi
          
          WORKSPACE_NAME=$(az resource list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --resource-type "Microsoft.Fabric/workspaces" --query "[0].name" -o tsv 2>/dev/null || echo "")
          DATABASE_NAME="otel-observability-db"
          
          if [ -z "$WORKSPACE_NAME" ] || [ "$WORKSPACE_NAME" = "null" ]; then
            echo "No Fabric workspace found. This is expected if Fabric resources are still being created."
            echo "KQL tables will need to be created manually or in a subsequent run."
            exit 0
          fi
          
          echo "Found Fabric workspace: $WORKSPACE_NAME"
          echo "Creating KQL tables will be implemented in future iteration..."
          # Note: The PowerShell script for KQL table creation via Fabric API
          # is complex and requires additional authentication setup
          # For now, tables should be created manually in the Fabric portal

  report-status:
    name: Report Deployment Status
    needs: [deploy-infra, deploy-kql-tables]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Report status
        run: |
          if [ "${{ needs.deploy-infra.result }}" == "success" ] && [ "${{ needs.deploy-kql-tables.result }}" == "success" ]; then
            echo "✅ Deployment completed successfully"
          else
            echo "❌ Deployment failed"
            exit 1
          fi
